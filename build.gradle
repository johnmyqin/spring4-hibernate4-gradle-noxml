apply plugin: "java"
apply plugin: "idea"

sourceCompatibility = 1.7

[compileJava, javadoc, compileTestJava]*.options*.encoding = 'UTF-8'

//defaultTasks "build"



repositories {
    mavenLocal()
    maven { url "http://106.120.107.150:9355/nexus/content/groups/public/" }
}

configure(allprojects) { project ->
    group = "com.daojia"
    //
    ext.springVersion = "4.0.1.RELEASE"
    ext.hibernateVersion = "4.3.1.Final"
    ext.log4jVersion = "2.0-beta9"
    ext.servletVersion = "3.1.0"
    ext.slf4jVersion = "1.7.5"
    ext.jettyVersion = "9.1.2.v20140210"
    ext.spdyVersion = "8.1.14.v20131031"
    ext.jacksonVersion = "1.9.13"

}

configurations.all {
    all*.exclude group: 'commons-logging'
}





dependencies {
    //spring
    compile("org.springframework:spring-context:${springVersion}")
    compile("org.springframework:spring-context-support:${springVersion}")
    compile("org.springframework:spring-tx:${springVersion}")
    compile("org.springframework:spring-webmvc:${springVersion}")
    compile("org.springframework:spring-orm:${springVersion}")
    //hibernate
    compile("org.hibernate:hibernate-core:${hibernateVersion}")
    //slf4j
    compile("org.slf4j:slf4j-api:${slf4jVersion}")
    compile("org.slf4j:slf4j-simple:${slf4jVersion}")
    compile("org.slf4j:jcl-over-slf4j:${slf4jVersion}")
//    compile("org.slf4j:jcl-over-slf4j:${slf4jVersion}")
//    compile("org.slf4j:jcl-over-slf4j:${slf4jVersion}")
    //log4j
    compile("org.apache.logging.log4j:log4j-api:${log4jVersion}")
    compile("org.apache.logging.log4j:log4j-core:${log4jVersion}")
    compile("org.apache.logging.log4j:log4j-jcl:${log4jVersion}")
//    compile("org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}")
    compile("org.apache.logging.log4j:log4j-to-slf4j:${log4jVersion}")
//    compile("org.apache.logging.log4j:log4j-to-slf4j:${log4jVersion}")

    //servlet
    compile("javax.servlet:javax.servlet-api:${servletVersion}")
    //jetty
    compile("org.eclipse.jetty:jetty-server:${jettyVersion}")
    compile("org.eclipse.jetty:jetty-webapp:${jettyVersion}")
    compile("org.eclipse.jetty:jetty-annotations:${jettyVersion}")
    //spdy
//    compile("org.eclipse.jetty.spdy:spdy-jetty:${spdyVersion}")
//    compile("org.eclipse.jetty.spdy:spdy-jetty-http:${spdyVersion}")
    //jackson
//    compile("org.codehaus.jackson:jackson-mapper-asl:${jacksonVersion}")
//    compile("org.codehaus.jackson:jackson-mapper-asl:${jacksonVersion}")
    compile("com.fasterxml.jackson.core:jackson-databind:2.3.0")
    compile("com.fasterxml.jackson.core:jackson-core:2.3.0")
    compile("com.fasterxml.jackson.core:jackson-annotations:2.3.0")

}

sourceSets {
    main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$projectDir/src/main/webContent"]
        }
        resources {
            srcDirs = ["$projectDir/src/main/resources"]
        }
    }
    test {
        java {
            srcDirs = ["$projectDir/src/test/java"]
        }
        resources {
            srcDirs = ["$projectDir/src/test/resources"]
        }
    }

}


task initProject << {
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    def webSrc = "$projectDir/src/main/webContent"
    file(webSrc + "/webapp").mkdirs()
    file(webSrc + "/webapp/lib").mkdirs()
    file(webSrc + "/webapp/css").mkdirs()
    file(webSrc + "/webapp/js").mkdirs()
    file(webSrc + "/webapp/img").mkdirs()
    file(webSrc + "/webapp/view").mkdirs()
}

build.dependsOn initProject
